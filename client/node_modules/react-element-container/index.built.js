'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _isDom = require('is-dom');

var _isDom2 = _interopRequireDefault(_isDom);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ElementContainer = (function (_React$Component) {
  _inherits(ElementContainer, _React$Component);

  function ElementContainer() {
    _classCallCheck(this, ElementContainer);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(ElementContainer).apply(this, arguments));
  }

  _createClass(ElementContainer, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement('div', { ref: 'container' });
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps) {
      return this.props.child !== nextProps.child;
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      this._updateChild(prevProps);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._updateChild({});
    }
  }, {
    key: '_updateChild',
    value: function _updateChild(prevProps) {
      var wrap = _reactDom2.default.findDOMNode(this.refs.container);
      var next = this.props.child;
      var prev = prevProps.child;

      if (next) {
        wrap.appendChild(next);
      }

      if (prev && prev !== next && prev.parentNode === wrap) {
        wrap.removeChild(prev);
      }
    }
  }]);

  return ElementContainer;
})(_react2.default.Component);

exports.default = ElementContainer;

ElementContainer.propTypes = {
  child: _isDom2.default
};
